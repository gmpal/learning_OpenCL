#define N 1000

// Integers sum 
__kernel void intSum(__global int* dest, int num, int flag)
{
	int result = 0; 

	#pragma unroll N 
	for (int i = 0; i < N; ++i)
		result = result + num; 
   
	//fooling the compiler
    if (flag * result)
        dest[get_global_id(0)] = result;
}



// Float sum 
__kernel void floatSum(__global float* dest, float num, int flag)
{
	float result = 0; 

	#pragma unroll N 
	for (int i = 0; i < N; ++i)
		result = result + num; 
   
	//fooling the compiler
    if (flag * result)
        dest[get_global_id(0)] = result;
}


// Mixed float and integer sum 
__kernel void mixSum(__global float* dest, int num, int flag)
{
	//Having a starting number different from 0 is not really an issue: we don't care about the result, only about the operation
	float result = 1.1; 

	#pragma unroll N 
	for (int i = 0; i < N; ++i)
		result = result + num; 
   
	//fooling the compiler
    if (flag * result)
        dest[get_global_id(0)] = result;
}

